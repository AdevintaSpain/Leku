{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<ul> <li>The location Picker for Android *</li> </ul> <p>Component library for Android that uses Google Maps and returns a latitude, longitude and an address based on the location picked with the Activity provided.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Search by voice</li> <li>Search by text</li> <li>Geo Location by GPS, network</li> <li>Google Places (optional)</li> <li>Google Time Zone API (optional)</li> <li>Pick locations using \"touch\" gestures on the map</li> <li>Customization (Theme and layout)</li> <li>Events Tracking</li> <li>Multi-language support (English and Spanish supported by default)</li> <li>RTL (Right-To-Left) layout support </li> </ul>"},{"location":"apps_using_leku/","title":"Apps Using Leku","text":"<p>The following is a list of some of the public apps using Leku and are published on the Google Play Store.</p> <p>Want to add your app? Found an app that no longer works or no longer uses Leku? Please submit a pull request on GitHub to update this page!</p> vibbo Worksi Domoticz"},{"location":"bugs_and_feedback/","title":"Bugs and Feedback","text":"<p>For bugs, questions and discussions please use the Github Issues.</p>"},{"location":"contributing/","title":"Contributing","text":"<ol> <li>Create an issue to discuss about your idea</li> <li>[Fork it] (https://github.com/AdevintaSpain/leku/fork)</li> <li>Create your feature branch (<code>git checkout -b my-new-feature</code>)</li> <li>Commit your changes (<code>git commit -am 'Add some feature'</code>)</li> <li>Push to the branch (<code>git push origin my-new-feature</code>)</li> <li>Create a new Pull Request</li> <li>Profit!</li> </ol>"},{"location":"customization/","title":"Customization","text":""},{"location":"customization/#theming","title":"Theming","text":"<p>This library uses material components, so should use Theme.MaterialComponents or descendant in manifest.</p> <pre><code>&lt;item name=\"colorPrimary\"&gt;#E91E63&lt;/item&gt;\n&lt;item name=\"colorPrimaryDark\"&gt;#C51162&lt;/item&gt;\n&lt;item name=\"colorAccent\"&gt;#FBC02D&lt;/item&gt;\n&lt;item name=\"colorControlActivated\"&gt;#E91E63&lt;/item&gt;\n</code></pre> <p><code>colorControlActivated</code> is used to colorize Street title, if not set, it uses colorAccent by default</p> <p>To customize map, use:</p> <pre><code>.withMapStyle(R.raw.map_style_retro)\n</code></pre> <p>Theme creator here: https://mapstyle.withgoogle.com/</p>"},{"location":"customization/#layout","title":"Layout","text":"<p>It's possible to hide or show some of the information shown after selecting a location. Using tha bundle parameter LocationPickerActivity.LAYOUTS_TO_HIDE you can change the visibility of the street, city or the zipcode.</p> <pre><code>intent.putExtra(LocationPickerActivity.LAYOUTS_TO_HIDE, \"street|city|zipcode\")\n</code></pre>"},{"location":"customization/#legacy-layout","title":"Legacy Layout","text":"<p>If you want to use the old Leku layout design you need to add this line to the builder:</p> <pre><code>val locationPickerIntent = LocationPickerActivity.Builder(context)\n    .withLegacyLayout()\n</code></pre>"},{"location":"customization/#search-zone","title":"Search Zone","text":"<p>By default the search will be restricted to a zone determined by your default locale. If you want to force the search zone you can do it by adding this line with the locale preferred:</p> <pre><code>intent.putExtra(LocationPickerActivity.SEARCH_ZONE, \"es_ES\")\n</code></pre>"},{"location":"customization/#search-zone-rect","title":"Search Zone Rect","text":"<p>If you want to force the search zone you can do it by adding this line with the lower left and upper right rect locations:</p> <pre><code>intent.putExtra(LocationPickerActivity.SEARCH_ZONE_RECT, SearchZoneRect(LatLng(26.525467, -18.910366), LatLng(43.906271, 5.394197)))\n</code></pre>"},{"location":"customization/#default-search-zone-locale","title":"Default Search Zone Locale","text":"<p>If you want to be able to search with the default device locale, you can do it by adding this line:</p> <pre><code>intent.putExtra(LocationPickerActivity.SEARCH_ZONE_DEFAULT_LOCALE, true)\n</code></pre> <p>Note: If you don't specify any search zone it will not search using any default search zone. It will search on all around the world.</p>"},{"location":"customization/#force-return-location-on-back-pressed","title":"Force return location on back pressed","text":"<p>If you want to force that when the user clicks on back button it returns the location you can use this parameter (note: is only enabled if you don't provide a location):</p> <pre><code>intent.putExtra(LocationPickerActivity.BACK_PRESSED_RETURN_OK, true)\n</code></pre>"},{"location":"customization/#enabledisable-the-satellite-view","title":"Enable/Disable the Satellite view","text":"<p>If you want to disable the satellite view button you can use this parameter (note: the satellite view is enabled by default):</p> <pre><code>intent.putExtra(LocationPickerActivity.ENABLE_SATELLITE_VIEW, false)\n</code></pre>"},{"location":"customization/#enabledisable-requesting-location-permissions","title":"Enable/Disable requesting location permissions","text":"<p>If you want to disable asking for location permissions (and prevent any location requests)</p> <pre><code>intent.putExtra(LocationPickerActivity.ENABLE_LOCATION_PERMISSION_REQUEST, false)\n</code></pre>"},{"location":"customization/#enabledisable-voice-search","title":"Enable/Disable voice search","text":"<p>Now you can hide the voice search option on the search view</p> <pre><code>intent.putExtra(LocationPickerActivity.ENABLE_VOICE_SEARCH, false)\n</code></pre>"},{"location":"customization/#hideshow-unnamed-road-on-address-view","title":"Hide/Show \"Unnamed Road\" on Address view","text":"<p>Now you can hide or show the text returned by the google service with \"Unnamed Road\" when no road name available</p> <pre><code>intent.putExtra(LocationPickerActivity.UNNAMED_ROAD_VISIBILITY, false)\n</code></pre>"},{"location":"extra/","title":"Extra","text":"<p>If you would like to use the Geocoder presenter (MVP) used for this use case you are free to use it! GeocoderPresenter has three methods:</p> <ul> <li> <p>getLastKnownLocation: Which obviously returns the last known user location as a Location object.</p> </li> <li> <p>getFromLocationName(String query): Returns a List<code>&lt;</code>Address<code>&gt;</code> for the text introduced.</p> </li> <li> <p>getFromLocationName(String query, LatLng lowerLeft, LatLng upperRight): Returns a List<code>&lt;</code>Address<code>&gt;</code> for the text and the Rectangle introduced.</p> </li> <li> <p>getDebouncedFromLocationName(String query, int debounceTime): Returns a List<code>&lt;</code>Address<code>&gt;</code> for the text introduced. Useful if you want to implement your own search view with auto-complete.</p> </li> <li> <p>getDebouncedFromLocationName(String query, LatLng lowerLeft, LatLng upperRight, int debounceTime): Returns a List<code>&lt;</code>Address<code>&gt;</code> for the text and the Rectangle introduced. Useful if you want to implement your own search view with auto-complete.</p> </li> <li> <p>getInfoFromLocation(double latitude, double longitude): Returns a List<code>&lt;</code>Address<code>&gt;</code> based on a latitude and a longitude.</p> </li> </ul> <p>To use it first you need to implement the GeocoderViewInterface interface in your class like:</p> <pre><code>class LocationPickerActivity : AppCompatActivity(), GeocoderViewInterface {\n</code></pre> <p>Then you need to setup the presenter:</p> <pre><code>private val geocoderPresenter: GeocoderPresenter\n\noverride fun onCreate(savedInstanceState: Bundle?) {\n  super.onCreate(savedInstanceState)\n  ***\n  val placesDataSource = GooglePlacesDataSource(Places.getGeoDataClient(this, null))\n  val geocoder = Geocoder(this, Locale.getDefault())\n  apiInteractor = GoogleGeocoderDataSource(NetworkClient(), AddressBuilder())\n  val geocoderRepository = GeocoderRepository(AndroidGeocoderDataSource(geocoder), apiInteractor!!)\n  val timeZoneDataSource = GoogleTimeZoneDataSource(\n          GeoApiContext.Builder().apiKey(GoogleTimeZoneDataSource.getApiKey(this)).build())\n  geocoderPresenter = GeocoderPresenter(\n          ReactiveLocationProvider(applicationContext), geocoderRepository, placesDataSource, timeZoneDataSource)\n  geocoderPresenter?.setUI(this)\n  ***\n}\n</code></pre> <p>And besides filling the interface methods you have to add some things to your activity/fragment lifecycle to ensure that there are no leaks.</p> <pre><code>override fun onStart() {\n    super.onStart()\n    geocoderPresenter?.setUI(this)\n}\n\noverride fun onStop() {\n    geocoderPresenter?.stop()\n    super.onStop()\n}\n</code></pre>"},{"location":"extra/#transition-bundle","title":"Transition Bundle","text":"<p>If you need to send and receive a param through the LocationPickerActivity you can do it. You only need to add an \"Extra\" param to the intent like:</p> <pre><code>locationPickerIntent.putExtra(\"test\", \"this is a test\")\n</code></pre> <p>And parse it on onActivityResult callback:</p> <pre><code>val bundle = data.getBundleExtra(LocationPickerActivity.TRANSITION_BUNDLE)\nval test = bundle.getString(\"test\")\n</code></pre>"},{"location":"extra/#google-places","title":"Google Places","text":"<p>Leku now supports Google Places queries using the search box. If you want to enable it these are the steps you need to follow:</p> <ol> <li>You need to replace your old <code>com.google.android.maps.v2.API_KEY</code> meta-data for the <code>com.google.android.geo.API_KEY</code></li> </ol> <pre><code>&lt;!-- Use this if only using Maps and not Places\n    &lt;meta-data\n        android:name=\"com.google.android.maps.v2.API_KEY\"\n        android:value=\"@string/google_maps_key\"\n        /&gt;\n--&gt;\n\n    &lt;meta-data\n        android:name=\"com.google.android.geo.API_KEY\"\n        android:value=\"@string/google_maps_key\"/&gt;\n</code></pre> <ol> <li> <p>Enable Google Places API for Android on your google developer console.</p> </li> <li> <p>Enable it when instantiating LocationPickerActivity by adding <code>.withGooglePlacesEnabled()</code>:</p> </li> </ol> <pre><code>val locationPickerIntent = LocationPickerActivity.Builder(context)\n    **.withGooglePlacesEnabled()**\n    .build()\n</code></pre> <p>And you are good to go. :)</p>"},{"location":"extra/#geocoding-api-fallback","title":"Geocoding API Fallback","text":"<p>In few cases, the geocoding service from Android fails due to an issue with the NetworkLocator. The only way of fixing this is rebooting the device.</p> <p>In order to cover these cases, you can instruct Leku to use the Geocoding API. To enable it, just use the method '''withGeolocApiKey''' when invoking the LocationPicker.</p> <p>You should provide your Server Key as parameter. Keep in mind that the free tier only allows 2,500 requests per day. You can track how many times is it used in the Developer Console from Google.</p>"},{"location":"extra/#tests","title":"Tests","text":"<p>Note: If you need to execute the Espresso test you will need to add the Google Maps Key into the Tests AndroidManifest.xml</p> <p>Now you have all you need. :)</p>"},{"location":"extra/#important","title":"Important","text":"<p>Searching using the \"SearchView\" (geocoder) will be restricted to a zone if you are with a Locale from: US, UK, France, Italy and Spain. If not, the search will return results from all the world.</p>"},{"location":"extra/#sample-usage","title":"Sample usage","text":"<p>We provide a sample project which provides runnable code samples that demonstrate their use in Android applications. Note that you need to include your Google Play services key in the sample to be able to test it.</p>"},{"location":"getting_started/","title":"Getting Started","text":""},{"location":"getting_started/#prerequisites","title":"Prerequisites","text":"<p>minSdkVersion &gt;= 21 Google Play Services = 18.0.0 AndroidX</p>"},{"location":"getting_started/#download","title":"Download","text":"<p>Include the mavenCentral repository in your top <code>build.gradle</code>:</p> <p>Enabled by default on AndroidStudio projects</p> <pre><code>allprojects {\n    mavenCentral()\n}\n</code></pre> <p>Include the dependency in your app <code>build.gradle</code>:</p> <pre><code>dependencies {\n    implementation 'com.adevinta.android:leku:13.0.0'\n}\n</code></pre> <p>Alternatively, if you are using a different version of Google Play Services and AndroidX use this instead:</p> <pre><code>implementation ('com.adevinta.android:leku:13.0.0') {\n    exclude group: 'com.google.android.gms'\n    exclude group: 'androidx.appcompat'\n}\n</code></pre>"},{"location":"getting_started/#troubleshoot","title":"Troubleshoot","text":"<p>If you find this issue:</p> <p>Execution failed for task ':app:transformClassesWithMultidexlistForDebug'. com.android.build.api.transform.TransformException: Error while generating the main dex list:  Error while merging dex archives:  Program type already present: com.google.common.util.concurrent.ListenableFuture  Learn how to resolve the issue at https://developer.android.com/studio/build/dependencies#duplicate_classes.</p> <p>The workaround for this is:</p> <pre><code>// Add this to your app build.gradle.kts file\nconfigurations.all {\n    // this is a workaround for the issue:\n    // https://stackoverflow.com/questions/52521302/how-to-solve-program-type-already-present-com-google-common-util-concurrent-lis\n    exclude group: 'com.google.guava', module: 'listenablefuture'\n}\n</code></pre>"},{"location":"getting_started/#permissions","title":"Permissions","text":"<p>You must add the following permissions in order to use the Google Maps Android API:</p> <ul> <li> <p>android.permission.INTERNET   Used by the API to download map tiles from Google Maps servers.</p> </li> <li> <p>android.permission.ACCESS_NETWORK_STATE   Allows the API to check the connection status in order to determine whether data can be downloaded.</p> </li> </ul> <p>The following permissions are not required to use Google Maps Android API v2, but are recommended.</p> <ul> <li> <p>android.permission.ACCESS_COARSE_LOCATION   Allows the API to use WiFi or mobile cell data (or both) to determine the device's location. The API returns the location with an accuracy approximately equivalent to a city block.</p> </li> <li> <p>android.permission.ACCESS_FINE_LOCATION   Allows the API to determine as precise a location as possible from the available location providers, including the Global Positioning System (GPS) as well as WiFi and mobile cell data.</p> </li> <li> <p>android.permission.WRITE_EXTERNAL_STORAGE   Allows the API to cache map tile data in the device's external storage area.</p> </li> </ul> <pre><code>&lt;uses-permission android:name=\"android.permission.INTERNET\" /&gt;\n&lt;uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"/&gt;\n&lt;uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/&gt;\n&lt;uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" /&gt;\n&lt;uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" /&gt;\n\n&lt;uses-feature android:name=\"android.hardware.location.network\" android:required=\"false\" /&gt;\n&lt;uses-feature android:name=\"android.hardware.location.gps\" android:required=\"false\"  /&gt;\n</code></pre> <p>You must also explicitly declare that your app uses the android.hardware.location.network or android.hardware.location.gps hardware features if your app targets Android 5.0 (API level 21) or higher and uses the ACCESS_COARSE_LOCATION or ACCESS_FINE_LOCATION permission in order to receive location updates from the network or a GPS, respectively.</p> <p>Note: It supports runtime permissions for Android 6 (Marshmallow). You don't need to do anything, it will ask for permissions if needed.</p>"},{"location":"getting_started/#usage","title":"Usage","text":"<p>To use the LocationPickerActivity first you need to add these lines to your AndroidManifest file:</p> <pre><code>&lt;activity\n    android:name=\"com.adevinta.leku.LocationPickerActivity\"\n    android:label=\"@string/leku_title_activity_location_picker\"\n    android:theme=\"@style/Theme.MaterialComponents.Light.NoActionBar\"\n    android:windowSoftInputMode=\"adjustPan\"\n    android:parentActivityName=\".MainActivity\"&gt;\n    &lt;intent-filter&gt;\n        &lt;action android:name=\"android.intent.action.SEARCH\" /&gt;\n    &lt;/intent-filter&gt;\n    &lt;meta-data android:name=\"android.app.searchable\"\n        android:resource=\"@xml/leku_searchable\" /&gt;\n    &lt;meta-data\n        android:name=\"android.support.PARENT_ACTIVITY\"\n        android:value=\".MainActivity\" /&gt;\n&lt;/activity&gt;\n</code></pre> <p>Then you have setup the call to start this activity wherever you like, always as a ActivityResultLauncher. You can set a default location, search zone and other customizable parameters to load when you start the activity. You only need to use the Builder setters like:</p> <pre><code>val lekuActivityResultLauncher =\n        registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result: ActivityResult -&gt;\n            if (result.resultCode == Activity.RESULT_OK) {\n                Log.d(\"RESULT****\", \"OK\")\n                val latitude = data?.getDoubleExtra(LATITUDE, 0.0)\n                Log.d(\"LATITUDE****\", latitude.toString())\n                val longitude = data?.getDoubleExtra(LONGITUDE, 0.0)\n                Log.d(\"LONGITUDE****\", longitude.toString())\n                val address = data?.getStringExtra(LOCATION_ADDRESS)\n                Log.d(\"ADDRESS****\", address.toString())\n                val postalcode = data?.getStringExtra(ZIPCODE)\n                Log.d(\"POSTALCODE****\", postalcode.toString())\n                val bundle = data?.getBundleExtra(TRANSITION_BUNDLE)\n                Log.d(\"BUNDLE TEXT****\", bundle?.getString(\"test\").toString())\n                val fullAddress = data?.getParcelableExtra&lt;Address&gt;(ADDRESS)\n                if (fullAddress != null) {\n                    Log.d(\"FULL ADDRESS****\", fullAddress.toString())\n                }\n                val timeZoneId = data?.getStringExtra(TIME_ZONE_ID)\n                if (timeZoneId != null) {\n                    Log.d(\"TIME ZONE ID****\", timeZoneId)\n                }\n                val timeZoneDisplayName = data?.getStringExtra(TIME_ZONE_DISPLAY_NAME)\n                if (timeZoneDisplayName != null) {\n                    Log.d(\"TIME ZONE NAME****\", timeZoneDisplayName)\n                }\n            } else {\n                Log.d(\"RESULT****\", \"CANCELLED\")\n            }\n        }\n\nval locationPickerIntent = LocationPickerActivity.Builder(context)\n    .withLocation(41.4036299, 2.1743558)\n    .withGeolocApiKey(\"&lt;PUT API KEY HERE&gt;\")\n    .withGooglePlacesApiKey(\"&lt;PUT API KEY HERE&gt;\")\n    .withSearchZone(\"es_ES\")\n    .withSearchZone(SearchZoneRect(LatLng(26.525467, -18.910366), LatLng(43.906271, 5.394197)))\n    .withDefaultLocaleSearchZone()\n    .shouldReturnOkOnBackPressed()\n    .withStreetHidden()\n    .withCityHidden()\n    .withZipCodeHidden()\n    .withSatelliteViewHidden()\n    .withGooglePlacesEnabled()\n    .withGoogleTimeZoneEnabled()\n    .withVoiceSearchHidden()\n    .withUnnamedRoadHidden()\n    .withSearchBarHidden()\n    .build()\n\nactivity.lekuActivityResultLauncher.launch(locationPickerIntent)\n</code></pre> <p>That's all folks!</p>"},{"location":"license/","title":"License","text":"<p>Copyright 2016-2023 Adevinta Spain S.L.</p> <p>Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at</p> <pre><code>http://www.apache.org/licenses/LICENSE-2.0\n</code></pre> <p>Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.</p>"},{"location":"localization/","title":"Localization","text":"<p>If you would like to add more language translations the only thing you have to do is:</p> <ol> <li>Crate a new strings resource folder and file for your language like \"/values-ru\".</li> <li>Add all text translations for those strings:</li> </ol> <pre><code>&lt;string name=\"leku_title_activity_location_picker\"&gt;Location Picker&lt;/string&gt;\n&lt;string name=\"leku_load_location_error\"&gt;Something went wrong. Please try again.&lt;/string&gt;\n&lt;string name=\"leku_no_search_results\"&gt;There are no results for your search&lt;/string&gt;\n&lt;string name=\"leku_unknown_location\"&gt;unknown location&lt;/string&gt;\n&lt;string name=\"leku_voice_search_promp\"&gt;Search by voice\u2026&lt;/string&gt;\n&lt;string name=\"leku_voice_search_extra_language\"&gt;en-EN&lt;/string&gt;\n&lt;string name=\"leku_toolbar_action_voice_title\"&gt;Voice&lt;/string&gt;\n&lt;string name=\"leku_search_hint\"&gt;Search&lt;/string&gt;\n</code></pre> <p>Note that you have the voice_search_extra_language that is used for the language of the voice recognition. Replace it with the allowed voice recognition locale for your language.</p> <p>We encourage you to add these languages to this component, please fork this project and submit new languages with a PR. Thanks!</p>"},{"location":"permissions/","title":"Permissions","text":"<p>You must add the following permissions in order to use the Google Maps Android API:</p> <ul> <li> <p>android.permission.INTERNET   Used by the API to download map tiles from Google Maps servers.</p> </li> <li> <p>android.permission.ACCESS_NETWORK_STATE   Allows the API to check the connection status in order to determine whether data can be downloaded.</p> </li> </ul> <p>The following permissions are not required to use Google Maps Android API v2, but are recommended.</p> <ul> <li> <p>android.permission.ACCESS_COARSE_LOCATION   Allows the API to use WiFi or mobile cell data (or both) to determine the device's location. The API returns the location with an accuracy approximately equivalent to a city block.</p> </li> <li> <p>android.permission.ACCESS_FINE_LOCATION   Allows the API to determine as precise a location as possible from the available location providers, including the Global Positioning System (GPS) as well as WiFi and mobile cell data.</p> </li> <li> <p>android.permission.WRITE_EXTERNAL_STORAGE   Allows the API to cache map tile data in the device's external storage area.</p> </li> </ul> <pre><code>&lt;uses-permission android:name=\"android.permission.INTERNET\" /&gt;\n&lt;uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"/&gt;\n&lt;uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/&gt;\n&lt;uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" /&gt;\n&lt;uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" /&gt;\n\n&lt;uses-feature android:name=\"android.hardware.location.network\" android:required=\"false\" /&gt;\n&lt;uses-feature android:name=\"android.hardware.location.gps\" android:required=\"false\"  /&gt;\n</code></pre> <p>You must also explicitly declare that your app uses the android.hardware.location.network or android.hardware.location.gps hardware features if your app targets Android 5.0 (API level 21) or higher and uses the ACCESS_COARSE_LOCATION or ACCESS_FINE_LOCATION permission in order to receive location updates from the network or a GPS, respectively.</p> <p>Note: It supports runtime permissions for Android 6 (Marshmallow). You don't need to do anything, it will ask for permissions if needed.</p>"},{"location":"tracking/","title":"Tracking","text":"<p>Optionally, you can set a tracking events listener. Implement LocationPickerTracker interface, and set it in your Application class as follows:</p> <pre><code>LocationPicker.tracker = &lt;&lt;YourOwnTracker implementing LocationPickerTracker&gt;&gt;()\n</code></pre> <p>Available tracking events are:</p> TAG Message GOOGLE_API_CONNECTION_FAILED Connection Failed START_VOICE_RECOGNITION_ACTIVITY_FAILED Start Voice Recognition Activity Failed ON_LOAD_LOCATION_PICKER Location Picker ON_SEARCH_LOCATIONS Click on search for locations ON_LOCALIZED_ME Click on localize me ON_LOCALIZED_BY_POI Long click on map SIMPLE_ON_LOCALIZE_BY_POI Click on map SIMPLE_ON_LOCALIZE_BY_LEKU_POI Click on POI RESULT_OK Return location CANCEL Return without location"},{"location":"who_made_this/","title":"Who Made This","text":"Ferran Pons"},{"location":"who_made_this/#contributors","title":"Contributors","text":"Diego Mill\u00e1n Gerard Pedreny Marc Serra Sergio Castillo Bernat Borras Cristian Garc\u00eda"}]}