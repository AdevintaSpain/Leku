apply plugin: 'pmd'
apply plugin: 'findbugs'
apply plugin: 'checkstyle'

def isTravis = "true".equals(System.getenv("TRAVIS"))

pmd {
  ruleSetFiles = files("${project.rootDir}/config/pmd/pmd-ruleset.xml")
  ignoreFailures = false
}

findbugs {
  includeFilter = file("${project.rootDir}/config/findbugs/findbugs-config.xml")
  excludeFilter = file("${project.rootDir}/config/findbugs/findbugs-excludes.xml")
  ignoreFailures = false
}

checkstyle {
  toolVersion = "7.1.1"
  showViolations false
}

android.lintOptions {
  abortOnError true
  lintConfig file("${project.rootDir}/config/lint/lint.xml")
}

task pmd(type: Pmd) {
  description "Analyze code with the PMD tool"
  group "Verification"

  source 'src'
  include '**/*.java'
  exclude '**/gen/**'

  reports {
    xml.enabled = isTravis
    html.enabled = true
  }
}

// Excludes based on https://github.com/ChaitanyaPramod/findbugs-android
def androidDataBindingExcludes =
    ['android/databinding/**/*.class',
     '**/android/databinding/*Binding.class',
     '**/BR.*'].asImmutable()

def Collection<String> androidExcludes =
    ['**/R.class',
     '**/R$*.class',
     '**/BuildConfig.*',
     '**/Manifest*.*',
     '**/*.bin'
    ].asImmutable()

def Collection<String> butterKnifeExcludes =
    ['**/*$ViewInjector*.*',
     '**/*$ViewBinder*.*'].asImmutable()

def Collection<String> dagger2Excludes =
    ['**/*_MembersInjector.class',
     '**/Dagger*Component.class',
     '**/Dagger*Component$Builder.class',
     '**/*Module_*Factory.class'].asImmutable()

def Collection<String> defaultExcludes =
    (androidDataBindingExcludes + androidExcludes + butterKnifeExcludes + dagger2Excludes)
        .asImmutable()

getVariants().all { variant ->
  task("findbugs${variant.name.capitalize()}", type: FindBugs) {
    description "Analyze ${variant.name} code with the findbugs tool"
    group "Verification"

    source = variant.javaCompile.source
    classes = project.fileTree(dir: variant.javaCompile.destinationDir, excludes: defaultExcludes)
    classpath = variant.javaCompile.classpath

    reports {
      xml.enabled = isTravis
      html.enabled = !isTravis
    }
    dependsOn variant.javaCompile
  }
}

task findbugs() {
  description "Analyze code with the findbugs tool"
  group "Verification"

  dependsOn tasks.withType(FindBugs)
}

task checkstyle(type: Checkstyle) {
  description 'Run checkstyle'
  group 'verification'

  configFile file("${project.rootDir}/config/checkstyle/checkstyle.xml")
  configProperties = [rootDir: "${project.rootDir}"]
  source 'src'
  include '**/*.java'
  exclude '**/gen/**'
  classpath = files()
}

check.dependsOn 'checkstyle', 'pmd'
check.finalizedBy 'findbugs', 'jacocoTestReport'

apply plugin: 'jacoco'

jacoco {
  toolVersion = "0.7.5.201505241946"
}

getVariants()
    .matching { it.getBuildType().isDebuggable() }
    .all { variant ->
  task("jacocoTestReport${variant.name.capitalize()}", type: JacocoReport) {
    description "Generate Jacoco coverage reports after running ${variant.name} tests."
    group = 'reporting'

    def fileFilter = ['**/R.class',
                      '**/R$*.class',
                      '**/BR.class',
                      '**/*Binding.class',
                      '**/*$ViewInjector*.*',
                      '**/BuildConfig.*',
                      '**/Manifest*.*',
                      '**/*Test*.*',
                      '**/*$InjectAdapter.class',
                      '**/*$ModuleAdapter.class',
                      '**/*Module.class',
                      '**/*Module_*Factory.class',
                      '**/*Component.class',
                      '**/AutoValue_*.*',
                      '**/*$$*',
                      'android/**/*.*']

    def debugTree = fileTree(dir: "$project.buildDir/intermediates/classes/${variant.dirName}", excludes: fileFilter)

    sourceDirectories = files([variant.javaCompile.source])
    classDirectories = files([debugTree])
    executionData = files(["${buildDir}/jacoco/test${variant.name.capitalize()}UnitTest.exec"])

    reports {
      xml.enabled = isTravis
      html.enabled = true
    }
    dependsOn "test${variant.name.capitalize()}UnitTest"
  }
}

private def getVariants() {
  if (plugins.findPlugin('com.android.library')) {
    project.android.libraryVariants
  } else {
    project.android.applicationVariants.matching { it.isSigningReady() }
  }
}

task jacocoTestReport {
  group = 'reporting'
  description = 'Generate Jacoco coverage reports after running tests.'

  dependsOn tasks.withType(JacocoReport)
}