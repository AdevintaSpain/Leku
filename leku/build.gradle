apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'com.novoda.bintray-release'
apply plugin: 'twitter-gradle-plugin'
apply plugin: "org.jlleitschuh.gradle.ktlint"

def versionMajor = getVersionMajor()
def versionMinor = getVersionMinor()
def versionPatch = getVersionPatch()

group = 'com.schibstedspain.android'
version = "${versionMajor}.${versionMinor}.${versionPatch}"

android {
  compileSdkVersion 28
  resourcePrefix 'leku_'

  defaultConfig {
    minSdkVersion 15
    targetSdkVersion 28
    versionName version
    multiDexEnabled true
    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    consumerProguardFiles 'lib-proguard-rules.txt'
    vectorDrawables.useSupportLibrary = true
  }

  flavorDimensions 'tier'

  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
  dexOptions {
    preDexLibraries "true" != System.getenv("TRAVIS")
  }
  packagingOptions {
    exclude 'protobuf.meta'
  }
  lintOptions {
    disable 'ObsoleteLintCustomCheck'
  }
}

detekt {
  version = "1.0.0.RC7-3"
  profile("main") {
    input = "$projectDir/src/main/java"
    config = "config/detekt/detekt-config.yml"
    output = "$projectDir/build/reports/detekt/detekt.xml"
    filters = ".*test.*,.*/resources/.*,.*/tmp/.*"
  }
}

ktlint {
  reporters = ["PLAIN", "CHECKSTYLE"]
}

dependencies {
  implementation fileTree(dir: 'libs', include: ['*.jar'])

  def supportVersion = '28.0.0'
  implementation "com.android.support:appcompat-v7:$supportVersion"
  implementation "com.android.support:design:$supportVersion"

  def playServicesVersion = '15.0.1'
  implementation ("com.google.android.gms:play-services-maps:$playServicesVersion") {
	  exclude group: "com.android.support"
  }
  implementation ("com.google.android.gms:play-services-location:$playServicesVersion"){
	  exclude group: "com.android.support"
  }
  implementation ("com.google.android.gms:play-services-places:$playServicesVersion"){
	  exclude group: "com.android.support"
  }

  implementation "com.google.maps:google-maps-services:0.2.9"

  implementation 'pl.charmas.android:android-reactive-location2:2.1@aar'

  implementation 'io.reactivex.rxjava2:rxjava:2.1.17'
  implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'
  implementation 'nl.littlerobots.rxlint:rxlint:1.6.1'


  def espressoVersion = '3.0.2'
  androidTestImplementation "com.android.support.test.espresso:espresso-core:$espressoVersion"
  androidTestImplementation "com.android.support.test.espresso:espresso-intents:$espressoVersion"

  def supportTestVersion = '1.0.2'
  androidTestImplementation "com.android.support.test:runner:$supportTestVersion"
  androidTestImplementation "com.android.support.test:rules:$supportTestVersion"
  androidTestImplementation 'com.android.support.test.uiautomator:uiautomator-v18:2.1.3'
  androidTestImplementation 'org.mockito:mockito-core:2.18.3'

  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

publish {
  userOrg = 'schibstedspain'
  groupId = 'com.schibstedspain.android'
  artifactId = 'leku'
  publishVersion = "${versionMajor}.${versionMinor}.${versionPatch}"
  desc = 'Location picker component for Android. It returns a latitude,longitude and an address based on the location picked in the LocationPickerActivity provided.'
  website = 'https://github.com/SchibstedSpain/leku'
}

twitterPlugin {
  consumerKey = System.getenv()['TWITTER_API_KEY']
  consumerSecret = System.getenv()['TWITTER_API_SECRET']
  accessToken = System.getenv()['TWITTER_ACCESS_TOKEN']
  accessTokenSecret = System.getenv()['TWITTER_ACCESS_TOKEN_SECRET']
  message = "New Leku version ${versionMajor}.${versionMinor}.${versionPatch} available for download. Check out the details at https://github.com/SchibstedSpain/Leku @SchibstedEng #Android #library #AndroidDev"
}

tasks.withType(Javadoc).all {
  enabled = false
}

def getVersionMajor() {
  def content = file('../version.properties')

  Properties properties = new Properties()
  InputStream is = new ByteArrayInputStream(content.getBytes())
  properties.load(is)

  return properties['MAJOR'].toInteger()
}

def getVersionMinor() {
  def content = file('../version.properties')

  Properties properties = new Properties()
  InputStream is = new ByteArrayInputStream(content.getBytes())
  properties.load(is)

  return properties['MINOR'].toInteger()
}

def getVersionPatch() {
  def content = file('../version.properties')

  Properties properties = new Properties()
  InputStream is = new ByteArrayInputStream(content.getBytes())
  properties.load(is)

  return properties['PATCH'].toInteger()
}
